// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package msg_stream

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChatSteamServiceClient is the client API for ChatSteamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatSteamServiceClient interface {
	SayHello(ctx context.Context, in *MessageReq, opts ...grpc.CallOption) (ChatSteamService_SayHelloClient, error)
}

type chatSteamServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatSteamServiceClient(cc grpc.ClientConnInterface) ChatSteamServiceClient {
	return &chatSteamServiceClient{cc}
}

func (c *chatSteamServiceClient) SayHello(ctx context.Context, in *MessageReq, opts ...grpc.CallOption) (ChatSteamService_SayHelloClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChatSteamService_ServiceDesc.Streams[0], "/msg_stream.ChatSteamService/SayHello", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatSteamServiceSayHelloClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChatSteamService_SayHelloClient interface {
	Recv() (*MessageRes, error)
	grpc.ClientStream
}

type chatSteamServiceSayHelloClient struct {
	grpc.ClientStream
}

func (x *chatSteamServiceSayHelloClient) Recv() (*MessageRes, error) {
	m := new(MessageRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChatSteamServiceServer is the server API for ChatSteamService service.
// All implementations must embed UnimplementedChatSteamServiceServer
// for forward compatibility
type ChatSteamServiceServer interface {
	SayHello(*MessageReq, ChatSteamService_SayHelloServer) error
	mustEmbedUnimplementedChatSteamServiceServer()
}

// UnimplementedChatSteamServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChatSteamServiceServer struct {
}

func (UnimplementedChatSteamServiceServer) SayHello(*MessageReq, ChatSteamService_SayHelloServer) error {
	return status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedChatSteamServiceServer) mustEmbedUnimplementedChatSteamServiceServer() {}

// UnsafeChatSteamServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatSteamServiceServer will
// result in compilation errors.
type UnsafeChatSteamServiceServer interface {
	mustEmbedUnimplementedChatSteamServiceServer()
}

func RegisterChatSteamServiceServer(s grpc.ServiceRegistrar, srv ChatSteamServiceServer) {
	s.RegisterService(&ChatSteamService_ServiceDesc, srv)
}

func _ChatSteamService_SayHello_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MessageReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatSteamServiceServer).SayHello(m, &chatSteamServiceSayHelloServer{stream})
}

type ChatSteamService_SayHelloServer interface {
	Send(*MessageRes) error
	grpc.ServerStream
}

type chatSteamServiceSayHelloServer struct {
	grpc.ServerStream
}

func (x *chatSteamServiceSayHelloServer) Send(m *MessageRes) error {
	return x.ServerStream.SendMsg(m)
}

// ChatSteamService_ServiceDesc is the grpc.ServiceDesc for ChatSteamService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatSteamService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "msg_stream.ChatSteamService",
	HandlerType: (*ChatSteamServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SayHello",
			Handler:       _ChatSteamService_SayHello_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "msgstream.proto",
}
