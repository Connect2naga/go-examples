// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package bi_stream

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChatBiSteamServiceClient is the client API for ChatBiSteamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatBiSteamServiceClient interface {
	SayHello(ctx context.Context, opts ...grpc.CallOption) (ChatBiSteamService_SayHelloClient, error)
}

type chatBiSteamServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatBiSteamServiceClient(cc grpc.ClientConnInterface) ChatBiSteamServiceClient {
	return &chatBiSteamServiceClient{cc}
}

func (c *chatBiSteamServiceClient) SayHello(ctx context.Context, opts ...grpc.CallOption) (ChatBiSteamService_SayHelloClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChatBiSteamService_ServiceDesc.Streams[0], "/bi_stream.ChatBiSteamService/SayHello", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatBiSteamServiceSayHelloClient{stream}
	return x, nil
}

type ChatBiSteamService_SayHelloClient interface {
	Send(*MessageReq) error
	Recv() (*MessageRes, error)
	grpc.ClientStream
}

type chatBiSteamServiceSayHelloClient struct {
	grpc.ClientStream
}

func (x *chatBiSteamServiceSayHelloClient) Send(m *MessageReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chatBiSteamServiceSayHelloClient) Recv() (*MessageRes, error) {
	m := new(MessageRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChatBiSteamServiceServer is the server API for ChatBiSteamService service.
// All implementations must embed UnimplementedChatBiSteamServiceServer
// for forward compatibility
type ChatBiSteamServiceServer interface {
	SayHello(ChatBiSteamService_SayHelloServer) error
	mustEmbedUnimplementedChatBiSteamServiceServer()
}

// UnimplementedChatBiSteamServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChatBiSteamServiceServer struct {
}

func (UnimplementedChatBiSteamServiceServer) SayHello(ChatBiSteamService_SayHelloServer) error {
	return status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedChatBiSteamServiceServer) mustEmbedUnimplementedChatBiSteamServiceServer() {}

// UnsafeChatBiSteamServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatBiSteamServiceServer will
// result in compilation errors.
type UnsafeChatBiSteamServiceServer interface {
	mustEmbedUnimplementedChatBiSteamServiceServer()
}

func RegisterChatBiSteamServiceServer(s grpc.ServiceRegistrar, srv ChatBiSteamServiceServer) {
	s.RegisterService(&ChatBiSteamService_ServiceDesc, srv)
}

func _ChatBiSteamService_SayHello_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatBiSteamServiceServer).SayHello(&chatBiSteamServiceSayHelloServer{stream})
}

type ChatBiSteamService_SayHelloServer interface {
	Send(*MessageRes) error
	Recv() (*MessageReq, error)
	grpc.ServerStream
}

type chatBiSteamServiceSayHelloServer struct {
	grpc.ServerStream
}

func (x *chatBiSteamServiceSayHelloServer) Send(m *MessageRes) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chatBiSteamServiceSayHelloServer) Recv() (*MessageReq, error) {
	m := new(MessageReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChatBiSteamService_ServiceDesc is the grpc.ServiceDesc for ChatBiSteamService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatBiSteamService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bi_stream.ChatBiSteamService",
	HandlerType: (*ChatBiSteamServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SayHello",
			Handler:       _ChatBiSteamService_SayHello_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "bidirectional.proto",
}
